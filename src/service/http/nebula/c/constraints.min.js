const DF=(v,d)=>v||d,ID=id=>$(`#${id}`),IADD="&plus;",IREMOVE="&minus;";class Rule{constructor(col,op,values){this.c=col,this.o=op,this.v=values}}class Group{constructor(logic,rules,groups){this.l=logic,this.r=rules,this.g=groups}}export class Constraints{constructor(nested,containerId,columns,ops,group){this.nested_=nested,this.container_=$(`#${containerId}`),this.container_.html(""),this.columns_=columns,this.ops_=ops,this.id_=0,this.new_rule=(g,r)=>{const id=`r${this.id_++}`;g.append(`<div id="${id}" class="crule">\n                    <select class="cols"></select>\n                    <select class="ops"></select>\n                    <select class="values" multiple></select>\n                </div>`);const rule=ID(id),values=$($(rule).find(".values")[0]);r&&r.v.map(e=>values.append(`<option value="${e}">${e}</option>`));const sdv=values.selectize({delimiter:"",plugins:["restore_on_backspace","remove_button"],persist:!1,create:input=>({value:input,text:input})}),columns=$($(rule).find(".cols")[0]);this.columns_.map(e=>columns.append(`<option value="${e}">${e}</option>`));const ops=$($(rule).find(".ops")[0]);for(var v in this.ops_)ops.append(`<option value="${v}">${this.ops_[v]}</option>`);ID(id).append('<a class="del">&minus;</a>');const delr=$($(rule).find(".del")[0]);return delr.on("click",()=>{ID(id).remove()}),r&&(columns.val(r.c),ops.val(r.o),sdv[0].selectize.setValue(r.v)),rule},this.new_group=(p,g)=>{const parent=DF(p,this.container_),top=parent===this.container_,indent=top?"":"indent",id=`g${this.id_++}`,hasData=!!g;parent.append(`<div id="${id}" class="cgroup ${indent}"></div>`);const group=ID(id);if(!top){group.prepend('<a class="del">&minus;Group</a>');const delr=$($(group).find(".del")[0]);delr.on("click",()=>{ID(id).remove()})}group.prepend('<a class="addr">&plus;Rule</a>');const addR=$($(group).find(".addr")[0]);if(addR.on("click",()=>{this.new_rule(ID(id))}),this.nested_){addR.after('<a class="addg">&plus;Group</a>');const addG=$($(group).find(".addg")[0]);addG.on("click",()=>{this.new_group(ID(id))})}const name=`ct_${id}`;return group.prepend(`<input type="radio" name="${name}" value="AND" checked>and \n            <input type="radio" name="${name}" value="OR">or`),hasData?($(`input[name='${name}'][value='${g.l}']`).prop("checked",!0),$.each(g.r,(i,r)=>{this.new_rule(group,r)}),$.each(g.g,(i,gg)=>{this.new_group(group,gg)})):this.new_rule(group),group},group?this.new_group(null,group):this.new_group(),this.expr=()=>{const root=this.container_.children().first();return this.group(root)},this.group=eg=>{const gid=$(eg).attr("id"),ct=$(`input[name='ct_${gid}']:checked`).val(),rules=[];$(eg).find("> .crule").each((i,r)=>{rules.push(this.rule(r))});const groups=[];return $(eg).find("> .cgroup").each((i,g)=>{groups.push(this.group(g))}),new Group(ct,rules,groups)},this.rule=er=>{const col=$(er).find(".cols option:selected").val(),ops=$(er).find(".ops option:selected").val(),values=[];return $(er).find(".values option:selected").each((i,v)=>{values.push($(v).val())}),new Rule(col,ops,values)}}}