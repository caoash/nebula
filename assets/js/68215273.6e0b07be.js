"use strict";(self.webpackChunknebula=self.webpackChunknebula||[]).push([[444],{8664:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return m},default:function(){return d}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],u={layout:"default"},s="Time column, value and unit",o={unversionedId:"basics/time",id:"basics/time",isDocsHomePage:!1,title:"Time column, value and unit",description:"Internally - Nebula uses a reserved time column time to represent time point for every single record.",source:"@site/docs/basics/3-time.md",sourceDirName:"basics",slug:"/basics/time",permalink:"/docs/basics/time",tags:[],version:"current",sidebarPosition:3,frontMatter:{layout:"default"},sidebar:"defaultSidebar",previous:{title:"Security - Access Control",permalink:"/docs/basics/access_control"},next:{title:"SDK: javascript",permalink:"/docs/basics/sdk"}},m=[],p={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"time-column-value-and-unit"},"Time column, value and unit"),(0,l.kt)("p",null,"Internally - Nebula uses a reserved time column ",(0,l.kt)("inlineCode",{parentName:"p"},"__time__")," to represent time point for every single record.\nIt uses unix time UTC time value in seconds."),(0,l.kt)("h1",{id:"local-friendly-time-in-the-future"},"Local friendly time in the future"),(0,l.kt)("p",null,"In the future, we will enable user to see converted local time on its UI."),(0,l.kt)("h1",{id:"time-are-supported-mostly-by-javascript-built-in-date-object"},"Time are supported mostly by javascript built-in Date object."),(0,l.kt)("p",null,"So all user input from web or other client will be converted by ",(0,l.kt)("inlineCode",{parentName:"p"},"time.seconds")," method."),(0,l.kt)("h1",{id:"various-forms-of-time-supported"},"Various forms of time supported"),(0,l.kt)("p",null,"The time range start and end value can be any type of below format as long as it's valid"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"milliseconds: unix time in UTC milliseconds"),(0,l.kt)("li",{parentName:"ul"},"string format: such as ",(0,l.kt)("inlineCode",{parentName:"li"},"2020-07-07")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"2020-07-07 13:12:11"),", milliseconds supported but will be rounded as Nebula supports time granularity at seconds level."),(0,l.kt)("li",{parentName:"ul"},"common literals, like:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"now: represents right now"),(0,l.kt)("li",{parentName:"ul"},"-{x}{u}: represents some time ago including minutes, hours, days and weeks. These examples are all valid:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"-3days: 3 days ago"),(0,l.kt)("li",{parentName:"ul"},"-15m: 15 minutes ago"),(0,l.kt)("li",{parentName:"ul"},"-2wk: 2 weeks ago"),(0,l.kt)("li",{parentName:"ul"},"-4h: 4 hours ago.")))))),(0,l.kt)("p",null,"These units are supported right now as defined in code ",(0,l.kt)("inlineCode",{parentName:"p"},"time.js"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"minute: S_MIN,"),(0,l.kt)("li",{parentName:"ul"},"minutes: S_MIN,"),(0,l.kt)("li",{parentName:"ul"},"min: S_MIN,"),(0,l.kt)("li",{parentName:"ul"},"mins: S_MIN,"),(0,l.kt)("li",{parentName:"ul"},"m: S_MIN,"),(0,l.kt)("li",{parentName:"ul"},"hour: S_HR,"),(0,l.kt)("li",{parentName:"ul"},"hours: S_HR,"),(0,l.kt)("li",{parentName:"ul"},"hr: S_HR,"),(0,l.kt)("li",{parentName:"ul"},"hrs: S_HR,"),(0,l.kt)("li",{parentName:"ul"},"h: S_HR,"),(0,l.kt)("li",{parentName:"ul"},"day: S_DAY,"),(0,l.kt)("li",{parentName:"ul"},"days: S_DAY,"),(0,l.kt)("li",{parentName:"ul"},"d: S_DAY,"),(0,l.kt)("li",{parentName:"ul"},"week: S_WEEK,"),(0,l.kt)("li",{parentName:"ul"},"weeks: S_WEEK,"),(0,l.kt)("li",{parentName:"ul"},"wk: S_WEEK,"),(0,l.kt)("li",{parentName:"ul"},"wks: S_WEEK,"),(0,l.kt)("li",{parentName:"ul"},"w: S_WEEK")))}d.isMDXComponent=!0}}]);