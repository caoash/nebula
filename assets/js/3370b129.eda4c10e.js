"use strict";(self.webpackChunknebula=self.webpackChunknebula||[]).push([[274],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||a;return t?r.createElement(m,c(c({ref:n},l),{},{components:t})):r.createElement(m,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7202:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={layout:"default"},s="Connect Kafka",u={unversionedId:"configs/connect_kafka",id:"configs/connect_kafka",isDocsHomePage:!1,title:"Connect Kafka",description:"Kafka is the most popular streaming engine today.",source:"@site/docs/configs/3-connect_kafka.md",sourceDirName:"configs",slug:"/configs/connect_kafka",permalink:"/docs/configs/connect_kafka",tags:[],version:"current",sidebarPosition:3,frontMatter:{layout:"default"},sidebar:"defaultSidebar",previous:{title:"Data Formats",permalink:"/docs/configs/formats"}},l=[],f={toc:l};function p(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connect-kafka"},"Connect Kafka"),(0,a.kt)("p",null,"Kafka is the most popular streaming engine today.\nNo matter you deployed your own cluster or you use confluent cloud hosted services. Nebula can connect to your topic for real time analytics."),(0,a.kt)("p",null,"Here is an example shown how to add a table config to connect a topic created in confluent cloud.\nBy default, it uses SASL_SSL secure protocol for the connection.\nYou need an account with API key and secret which configured as ",(0,a.kt)("inlineCode",{parentName:"p"},"sasl.username")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sasl.password")," respectively.\nAlso you need a DNS address to connect their brokers, usually with port 9092."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  k.test1:\n    retention:\n      max-mb: 20000\n      max-hr: 24\n    schema: "ROW<name:string, value:int>"\n    data: kafka\n    topic: test2\n    loader: Streaming\n    source: <BROKER ADDRESS>\n    backup: s3://nebula/n116/\n    format: json\n    columns:\n      name:\n        dict: true\n    time:\n      # kafka will inject a time column when specified provided\n      type: provided\n    settings:\n      batch: 500\n      kafka.sasl.mechanisms: "PLAIN"\n      kafka.security.protocol: "SASL_SSL"\n      kafka.sasl.username: "<API KEY>"\n      kafka.sasl.password: "<API SECRET>"\n')),(0,a.kt)("p",null,"put this section in cluster config and you should be ready to use it."))}p.isMDXComponent=!0}}]);